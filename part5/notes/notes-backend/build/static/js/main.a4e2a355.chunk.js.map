{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","useEffect","noteService","initialNotes","notesToShow","filter","onSubmit","event","preventDefault","console","log","type","value","name","onChange","target","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","noteObject","date","Date","toISOString","Math","random","length","concat","ReactDOM","render","document","getElementById"],"mappings":"4KAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCK3BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKJ,UAAU,QAAf,SACGI,K,gBCRDC,EAAU,aAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC0G5BK,EApHH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,OAKgBR,mBAAS,IALzB,mBAKTS,EALS,KAKCC,EALD,OAMgBV,mBAAS,IANzB,mBAMTW,EANS,KAMCC,EAND,KAQhBC,qBAAU,WACRC,IAEGtB,MAAK,SAAAuB,GACJb,EAASa,QAEZ,IAEH,IAyCMC,EAAcX,EAChBJ,EACAA,EAAMgB,QAAO,SAAArC,GAAI,OAAIA,EAAKG,aAO9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASmB,IACvB,uBAAMW,SATU,SAACC,GACnBA,EAAMC,iBACNC,QAAQC,IAAI,kBAAmBb,EAAUE,IAOvC,UACE,2CAEI,uBACAY,KAAK,OACLC,MAAOf,EACPgB,KAAK,WACLC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBjB,EAAYiB,EAAOH,aAGjD,2CAEI,uBACAD,KAAK,WACLC,MAAOb,EACPc,KAAK,WACLC,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBf,EAAYe,EAAOH,aAGjD,wBAAQD,KAAK,SAAb,sBAEF,8BACE,yBAAQrC,QAAS,kBAAMoB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGW,EAAYY,KAAI,SAAChD,EAAMiD,GAAP,OACf,cAAC,EAAD,CAEEjD,KAAMA,EACNC,iBAAkB,kBApED,SAACgB,GACjB,sCAAkCA,GAA3C,IACMjB,EAAOqB,EAAM6B,MAAK,SAAAC,GAAC,OAAIA,EAAElC,KAAOA,KAChCmC,EAAW,2BAAQpD,GAAR,IAAcG,WAAYH,EAAKG,YAEhD+B,EACUjB,EAAImC,GACXxC,MAAK,SAAAyC,GACJ/B,EAASD,EAAM2B,KAAI,SAAAhD,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAOqD,SAEpDC,OAAM,SAAAC,GACL3B,EAAgB,SAAD,OACJ5B,EAAKK,QADD,sCAGfmD,YAAW,WACT5B,EAAgB,QACf,QAoDyB6B,CAAmBzD,EAAKiB,MAF3CgC,QAMX,uBAAMX,SAzFM,SAACC,GACfA,EAAMC,iBACN,IAAMkB,EAAa,CACjBrD,QAASkB,EACToC,MAAM,IAAIC,MAAOC,cACjB1D,UAAW2D,KAAKC,SAAW,GAC3B9C,GAAII,EAAM2C,OAAS,GAGrB9B,EACUwB,GACP9C,MAAK,SAAAyC,GACJ/B,EAASD,EAAM4C,OAAOZ,IACtB7B,EAAW,QA4Eb,UACE,uBACEoB,MAAOrB,EACPuB,SAvDiB,SAACP,GACxBf,EAAWe,EAAMQ,OAAOH,UAwDpB,wBAAQD,KAAK,SAAb,yB,MC9GRuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a4e2a355.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const toggleImportanceOf = (id) => {\n    const url = `http://localhost:3001/notes/${id}`\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  const handleLogin = (event) => {\n    event.preventDefault()\n    console.log('logging in with', username, password)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <form onSubmit={handleLogin}>\n        <div>\n          username\n            <input\n            type=\"text\"\n            value={username}\n            name=\"Username\"\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n          password\n            <input\n            type=\"password\"\n            value={password}\n            name=\"Password\"\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button type=\"submit\">login</button>\n      </form>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note, i) =>\n          <Note\n            key={i}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input\n          value={newNote}\n          onChange={handleNoteChange}\n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}